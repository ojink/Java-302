클래스의 구성요소: 필드(멤버변수), 메소드, 생성자
객체사용
1. 객체생성 new 클래스명();
2. 객체의 필드에 데이터 담기
3. 객체의 메소드를 호출

생성자 선언 - 필드를 초기화
1. 클래스 안에 선언
2. 생성자명은 클래스명 과 동일
3. 리턴타입이 없는 메소드의 형태

생성자 선언문이 없으면 default 생성자가 만들어진다
            하나라도 있으면 default 생성자는 만들어지지 않는다
              



----------------------------------
객체지향(객체중심) - Object Oriented Programming
현실세계의 모든 사물은 객체 라고 할 수 있다

자동차는 객체
차종, 년식, 주행거리 와 같은 특성(데이터)을 갖는다 - 변수
전진한다. 후진한다. 와이퍼를 움직인다. 클락션을 울린다 (기능)- 메소드


은행계좌는 객체
예금주, 계좌번호, 잔액 - 데이터(변수)
입금한다. 출금한다. - 기능(메소드)


기능(메소드)에 의해 데이터(필드)에 변화가 발생한다


클래스의 구성요소: 필드(멤버변수), 메소드, 생성자

객체만들기 위한 클래스 선언
class 클래스명 {
  필드, 메소드, 생성자
}

자동차 클래스
class 자동차 {
필드: 차종, 년식, 주행거리
메소드: 전진한다. 후진한다
}

은행계좌
class 은행계좌 {
필드: 예금주, 계좌번호, 잔액
메소드: 입금한다. 출금한다.
}

클래스는 객체를 생성하기 위한 성형틀이라고 생각하자

클래스를 틀로 해서 생성한 객체는 메모리에 올려진다(이 과정을 인스턴스화)
-> 인스턴스가 만들어 진다: 인스턴스생성, 객체생성
: 필드- 멤버변수, 인스턴스변수
       초기화하지 않아도 된다 - 숫자:0, boolean: false,  String: null 
구성요소들 간에는 레벨이 없다. : 동등레벨

객체생성문: new 클래스명();



실습 
1. 은행계좌 클래스 선언하기
   필드: 계좌번호, 예금주, 잔액
   메소드: 입금한다(입금한 금액만큼 잔액을 증가시키기)
             출금한다(입금한 금액만큼 잔액을 감소시키기, 출금한 금액을 반환하기)
 
2. 은행계좌를 만들어낼 클래스 선언하기: main 메소드를 갖는 클래스
    홍길동의 은행계좌 객체 생성하기
    통장정보출력: 예금주, 계좌번호, 잔액을 출력
    5만원 입금한 후 출력 
    3만원 출금한 후 출력







